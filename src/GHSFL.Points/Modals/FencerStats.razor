@using GHSFL.Points.Models

<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudExpansionPanels>
                @foreach (var pool in PoolInfoForFencer.Pools)
                {
                    var place = PlacesForFencer[pool.RoundNumber];
                    var text = $"Round {pool.RoundNumber} | Finished: {place}";
                    ElimInfoForFencer.TryGetValue(pool.RoundNumber, out var elim);
                    <MudExpansionPanel Text=@text Expanded="pool.RoundNumber == 1">
                        <MudText Typo="Typo.h4">Pool Results</MudText>
                        <MudTable T="PoolResults" Items="new[] { pool }" Class="ma-2 custom-paper">
                            <HeaderContent>
                                <MudTh>Round</MudTh>
                                <MudTh>Victories</MudTh>
                                <MudTh>V/M</MudTh>
                                <MudTh>Touches Scored</MudTh>
                                <MudTh>Touches Received</MudTh>
                                <MudTh>Indicator</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.RoundNumber</MudTd>
                                <MudTd>@context.Victories</MudTd>
                                <MudTd>@($"{context.Vm:N02}")</MudTd>
                                <MudTd>@context.Scored</MudTd>
                                <MudTd>@context.Received</MudTd>
                                <MudTd>@context.Indicator</MudTd>
                            </RowTemplate>
                        </MudTable>
                        <br/>
                        @if (elim is not null && elim.Any())
                        {
                            <MudText Typo="Typo.h4">DEs</MudText>
                            <MudPaper Elevation="3" Class="custom-paper">
                                <MudTimeline TimelinePosition="TimelinePosition.Alternate" class="timeline-fixed">
                                    @foreach (var e in elim.OrderByDescending(x => x.Round))
                                    {
                                        var color = FencerId == e.WinnerId ? Color.Success : Color.Error;
                                        <MudTimelineItem Color="@color" TimelineAlign="TimelineAlign.End">
                                            <ItemOpposite>
                                                <MudText>
                                                    @e.GetScoreForFencer(FencerId)
                                                </MudText>
                                            </ItemOpposite>
                                            <ItemContent>
                                                <MudText>
                                                    @e.GetScoreForOtherFencer(FencerId)
                                                </MudText>
                                            </ItemContent>
                                        </MudTimelineItem>
                                    }
                                </MudTimeline>
                            </MudPaper>
                        }
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public long FencerId { get; set; }
    [Parameter] public PoolsForFencer PoolInfoForFencer { get; set; }
    [Parameter] public Dictionary<int, List<ElimResults>> ElimInfoForFencer { get; set; }
    [Parameter] public Dictionary<int, string> PlacesForFencer { get; set; }

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Cancel();
}