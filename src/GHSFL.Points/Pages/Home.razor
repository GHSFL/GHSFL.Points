@page "/"
@using GHSFL.Points.Models
@using System.Data

@inject ISnackbar Snackbar
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.Large">
    <div class="d-flex">
        <MudSelect T="string" ValueChanged="FilterGender" Label="Show gender">
            <MudSelectItem Value="@("Combined")">Combined</MudSelectItem>
            <MudSelectItem Value="@("Men")">Men</MudSelectItem>
            <MudSelectItem Value="@("Women")">Women</MudSelectItem>
        </MudSelect>
        <MudSpacer/>
        <MudSelect T="string" ValueChanged="FilterSchool" Label="Show school">
            <MudSelectItem Value="@("All")">All</MudSelectItem>
            @foreach (var school in _schools)
            {
                <MudSelectItem Value="@school">@school</MudSelectItem>
            }
        </MudSelect>
    </div>
    <br/>

    @if (_seasonInfo is not null)
    {
        <MudTable T="FencerInfo" Items="_tableData" Breakpoint="Breakpoint.LgAndDown">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Firstname)">
                        First
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Lastname)">
                        Last
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Club)">
                        Club
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.TotalPoints)">
                        Total Points
                    </MudTableSortLabel>
                </MudTh>
                @for (var i = 0; i < _seasonInfo.NumRounds; i++)
                {
                    var roundNum = i + 1;
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => PointForRound(x, roundNum))">
                            @($"Round {roundNum}")
                        </MudTableSortLabel>
                    </MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Firstname</MudTd>
                <MudTd>@context.Lastname</MudTd>
                <MudTd>@context.Club</MudTd>
                <MudTd>@context.TotalPoints</MudTd>
                @for (var i = 1; i <= _seasonInfo.NumRounds; i++)
                {
                    var displayValue = context.PointsPerRound.TryGetValue(i, out var value)
                        ? value.ToString()
                        : "-";
                    <MudTd>@displayValue</MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {

    /// <summary>
    /// The base season data that is used to populate the table.
    /// </summary>
    private SeasonInfo? _seasonInfo;
    
    /// <summary>
    /// The schools currently in the league.
    /// </summary>
    private List<string> _schools = new();
    
    /// <summary>
    /// The data currently being displayed in the table. 
    /// </summary>
    private List<FencerInfo> _tableData = new();

    private string _schoolFilter = "All";
    private string _genderFilter = "Combined";

    /// <summary>
    /// Filter based on selected gender.
    /// </summary>
    private void FilterGender(string value)
    {
        _genderFilter = value;
        Filter();
    }

    /// <summary>
    /// Filter based on selected school.
    /// </summary>
    private void FilterSchool(string value)
    {
        _schoolFilter = value;
        Filter();
    }

    /// <summary>
    /// Filter the table.
    /// </summary>
    private void Filter()
    {
        // First, filter based on the selected gender.
        var filtered = _genderFilter switch
        {
            "Combined" => _seasonInfo!.FencerPoints.OrderByDescending(x => x.TotalPoints).ToList(),
            "Men" => _seasonInfo!.FencerPoints.Where(x => x.Gender == "M").OrderByDescending(x => x.TotalPoints).ToList(),
            "Women" => _seasonInfo!.FencerPoints.Where(x => x.Gender == "F").OrderByDescending(x => x.TotalPoints).ToList(),
            _ => throw new ArgumentException("Unknown gender {value}")
        };
        
        // Then filter by school.
        filtered = _schoolFilter == "All" 
            ? filtered.OrderByDescending(x => x.TotalPoints).ToList() 
            : filtered.Where(x => x.Club == _schoolFilter).OrderByDescending(x => x.TotalPoints).ToList();

        // Update the data in the table.
        _tableData = filtered;
        StateHasChanged();
    }

    /// <summary>
    /// Gets points for a round for a fencer.
    /// </summary>
    private static string PointForRound(FencerInfo fencer, int round)
    {
        return fencer.PointsPerRound.TryGetValue(round, out var value) 
            ? value.ToString() 
            : "-";
    }

    /// <summary>
    /// First code to run on page load. This populates the table with data.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get the fencers from the fencer file.
                _seasonInfo = await Utils.GetDataFromFile(Http);

                // Do some other setup. 
                _tableData = _seasonInfo.FencerPoints
                    .OrderByDescending(x => x.TotalPoints)
                    .ToList();

                _schools = _seasonInfo.FencerPoints
                    .DistinctBy(x => x.Club)
                    .Select(x => x.Club)
                    .OrderBy(x => x)
                    .ToList();
            }
            catch (DataException)
            {
                Snackbar.Add("An error occured while fetching data. Please refresh the page. If the error " +
                             "persists, contact the GHSFL Tournament Coordinator.", Severity.Error);
            }
            catch (Exception e)
            {
                Snackbar.Add($"An unexpected error occured. Please send the below message to the GHSFL " +
                             $"Tournament Coordinator:\n{e.Message}", Severity.Error);
            }
            
            StateHasChanged();
        }
    }

}