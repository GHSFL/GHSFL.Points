@page "/"
@using GHSFL.Points.Models
@using System.Data
@using GHSFL.Points.Modals

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudSwitch @bind-Value="_fencerView" Label=@(_fencerView ? "Fencers" : "Schools") Color="Color.Primary"/>
</MudContainer>

@if (_fencerView)
{
    <MudContainer MaxWidth="MaxWidth.Large">
        @if (_genderFilter is "Men" or "Combined")
        {
            <MudText Typo="Typo.body1">There are @(_menQualified) men qualified for the individual championships@(_schoolFilter != "All" ? $" for {_schoolFilter}" : string.Empty).</MudText>
        }
        
        @if (_genderFilter is "Women" or "Combined")
        {
            <MudText Typo="Typo.body1">There are @(_womenQualified) women qualified for the individual championships@(_schoolFilter != "All" ? $" for {_schoolFilter}" : string.Empty).</MudText>
        }
        <br/>
        <div class="d-flex">
            <MudSelect T="string" ValueChanged="FilterGender" Label="Show gender">
                <MudSelectItem Value="@("Combined")">Combined</MudSelectItem>
                <MudSelectItem Value="@("Men")">Men</MudSelectItem>
                <MudSelectItem Value="@("Women")">Women</MudSelectItem>
            </MudSelect>
            <MudSpacer/>
            <MudSelect T="string" ValueChanged="FilterSchool" Label="Show school">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                @foreach (var school in _schools)
                {
                    <MudSelectItem Value="@school">@school</MudSelectItem>
                }
            </MudSelect>
            <MudSpacer/>
            <MudTooltip ShowOnClick="true" ShowOnHover="false" ShowOnFocus="false" Placement="Placement.Left">
                <ChildContent>
                    <MudIconButton Icon="@Icons.Material.Filled.HelpOutline"/>
                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.body1">In order to be qualified for the individual championships, a fencer must have fenced in 3 tournaments and have earned points at least once (placed in the top 16).</MudText>
                    <MudText Typo="Typo.body1">A dash (-) indicates that a fencer did not fence in the specified event.</MudText>
                </TooltipContent>
            </MudTooltip>
        </div>
        <br/>

        @if (_seasonInfo is not null)
        {
            <MudTable T="FencerInfo" Items="_tableData" Breakpoint="Breakpoint.LgAndDown"
                      OnRowClick="async row => { await OpenFencerDialog(row.Item); }">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Firstname)">
                            First
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Lastname)">
                            Last
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.Club)">
                            Club
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => x.TotalPoints)">
                            Total Points
                        </MudTableSortLabel>
                    </MudTh>
                    @for (var i = 0; i < _seasonInfo.NumRounds; i++)
                    {
                        var roundNum = i + 1;
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<FencerInfo, object>(x => PointForRound(x, roundNum))">
                                @($"R{roundNum}")
                            </MudTableSortLabel>
                        </MudTh>
                    }
                    <MudTh>Qualified for IC</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Firstname</MudTd>
                    <MudTd>@context.Lastname</MudTd>
                    <MudTd>@context.Club</MudTd>
                    <MudTd>@context.TotalPoints</MudTd>
                    @for (var i = 1; i <= _seasonInfo.NumRounds; i++)
                    {
                        var displayValue = context.PointsPerRound.TryGetValue(i, out var value)
                            ? value.ToString()
                            : "-";
                        <MudTd>@displayValue</MudTd>
                    }
                    <MudTh>
                        @if (context.QualifiedForIndividualChamps == true)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                        }
                    </MudTh>
                </RowTemplate>
            </MudTable>
        }
    </MudContainer>
}
else {
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudGrid Spacing="1">
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h4">Combined</MudText>
                <MudTable T="SchoolInfo" Items="_combinedPointsPerSchool">
                    <HeaderContent>
                        <MudTh>School</MudTh>
                        <MudTh>Points</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Club</MudTd>
                        <MudTd>@context.Points</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h4">Men's</MudText>
                <MudTable T="SchoolInfo" Items="_mensPointsPerSchool">
                    <HeaderContent>
                        <MudTh>School</MudTh>
                        <MudTh>Points</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Club</MudTd>
                        <MudTd>@context.Points</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h4">Women's</MudText>
                <MudTable T="SchoolInfo" Items="_womensPointsPerSchool">
                    <HeaderContent>
                        <MudTh>School</MudTh>
                        <MudTh>Points</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Club</MudTd>
                        <MudTd>@context.Points</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudContainer>
}


@code {

    /// <summary>
    /// The base season data that is used to populate the table.
    /// </summary>
    private SeasonInfo? _seasonInfo;

    /// <summary>
    /// The schools currently in the league.
    /// </summary>
    private List<string> _schools = new();

    /// <summary>
    /// The data currently being displayed in the table. 
    /// </summary>
    private List<FencerInfo> _tableData = new();

    /// <summary>
    /// The list of men's points by school.
    /// </summary>
    private List<SchoolInfo> _mensPointsPerSchool = new();
    
    /// <summary>
    /// The list of women's points by school.
    /// </summary>
    private List<SchoolInfo> _womensPointsPerSchool = new();
    
    /// <summary>
    /// The list of combined points by school.
    /// </summary>
    private List<SchoolInfo> _combinedPointsPerSchool = new();

    /// <summary>
    /// Dictionary of pool information where the key is a fencer ID and the value is information about the pools they
    /// fenced in.
    /// </summary>
    private Dictionary<long, PoolsForFencer> _poolInfo = new();

    /// <summary>
    /// How to filter the data by school.
    /// </summary>
    private string _schoolFilter = "All";
    
    /// <summary>
    /// How to filter the data by gender.
    /// </summary>
    private string _genderFilter = "Combined";

    /// <summary>
    /// If we're in the fencer data view. If this is false, we're looking at the school data view. 
    /// </summary>
    private bool _fencerView = true;

    /// <summary>
    /// The number of men qualified for the individual champs.
    /// </summary>
    private int _menQualified = 0;
    
    /// <summary>
    /// The number of women qualified for the individual champs.
    /// </summary>
    private int _womenQualified = 0;

    /// <summary>
    /// Filter based on selected gender.
    /// </summary>
    private void FilterGender(string value)
    {
        _genderFilter = value;
        Filter();
    }

    /// <summary>
    /// Filter based on selected school.
    /// </summary>
    private void FilterSchool(string value)
    {
        _schoolFilter = value;
        Filter();
    }

    /// <summary>
    /// Filter the table.
    /// </summary>
    private void Filter()
    {
        // First, filter based on the selected gender.
        var filtered = _genderFilter switch
        {
            "Combined" => _seasonInfo!.FencerPoints.OrderByDescending(x => x.TotalPoints).ToList(),
            "Men" => _seasonInfo!.FencerPoints.Where(x => x.Gender == "M").OrderByDescending(x => x.TotalPoints).ToList(),
            "Women" => _seasonInfo!.FencerPoints.Where(x => x.Gender == "F").OrderByDescending(x => x.TotalPoints).ToList(),
            _ => throw new ArgumentException("Unknown gender {value}")
        };

        // Then filter by school.
        filtered = _schoolFilter == "All"
            ? filtered.OrderByDescending(x => x.TotalPoints).ToList()
            : filtered.Where(x => x.Club == _schoolFilter).OrderByDescending(x => x.TotalPoints).ToList();

        // Update the data in the table.
        _tableData = filtered;
        _menQualified = _tableData.GetQualified("M");
        _womenQualified = _tableData.GetQualified("F");
        StateHasChanged();
    }

    /// <summary>
    /// Gets points for a round for a fencer.
    /// </summary>
    private static string PointForRound(FencerInfo fencer, int round)
    {
        return fencer.PointsPerRound.TryGetValue(round, out var value)
            ? value.ToString()
            : "-";
    }

    /// <summary>
    /// Populates club dictionaries.
    /// </summary>
    private void PopulateDictionaries()
    {
        foreach (var fencer in _seasonInfo!.FencerPoints)
        {
            if (fencer.Gender == "M")
            {
                _mensPointsPerSchool.AddOrUpdate(fencer.Club, fencer.TotalPoints);
            }
            else
            {
                _womensPointsPerSchool.AddOrUpdate(fencer.Club, fencer.TotalPoints);
            }

            _combinedPointsPerSchool.AddOrUpdate(fencer.Club, fencer.TotalPoints);

            _mensPointsPerSchool = _mensPointsPerSchool.OrderByDescending(x => x.Points).ToList();
            _womensPointsPerSchool = _womensPointsPerSchool.OrderByDescending(x => x.Points).ToList();
            _combinedPointsPerSchool = _combinedPointsPerSchool.OrderByDescending(x => x.Points).ToList();
        }
    }

    /// <summary>
    /// Open fencer stat dialog. Currently only has pool info.
    /// </summary>
    /// <param name="fencerInfo">The fencer info object.</param>
    private async Task OpenFencerDialog(FencerInfo fencerInfo)
    {
        // This, in theory, should never happen, but I'd rather cma than be sorry.
        if (!_poolInfo.TryGetValue(fencerInfo.FencerId, out var pools))
        {
            Snackbar.Add("Could not find pool data for fencer.", Severity.Error);
            return;
        }
        
        var parameters = new DialogParameters { { "PoolInfoForFencer", pools } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        // await DialogService.ShowAsync<FencerStats>($"Pools for {fencerInfo.Firstname} {fencerInfo.Lastname}",
        //     parameters, options);
    }

    /// <summary>
    /// First code to run on page load. This populates the table with data.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get the fencers from the fencer file.
                _seasonInfo = await Utils.GetFencerDataFromFile(Http);

                // Do some other setup. 
                _tableData = _seasonInfo.FencerPoints
                    .OrderByDescending(x => x.TotalPoints)
                    .ToList();

                // Get info by school.
                _schools = _seasonInfo.FencerPoints
                    .DistinctBy(x => x.Club)
                    .Select(x => x.Club)
                    .OrderBy(x => x)
                    .ToList();

                // Get the # of men that are qualified for the IC.
                _menQualified = _tableData.GetQualified("M");
                
                // Get the # of women that are qualified for the IC.
                _womenQualified = _tableData.GetQualified("F");
                
                _poolInfo = await Utils.GetPoolDataFromFile(Http);
                PopulateDictionaries();
            }
            catch (DataException)
            {
                Snackbar.Add("An error occured while fetching data. Please refresh the page. If the error " +
                             "persists, contact the GHSFL Tournament Coordinator.", Severity.Error);
            }
            catch (Exception e)
            {
                Snackbar.Add($"An unexpected error occured. Please send the below message to the GHSFL " +
                             $"Tournament Coordinator:\n{e.Message}", Severity.Error);
            }

            StateHasChanged();
        }
    }

}
